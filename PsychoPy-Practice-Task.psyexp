<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1470, 956]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="PsychoPy-Practice-Task" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="setUp">
      <CodeComponent name="setUpCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import random&amp;#10;&amp;#10;# Initialize variables&amp;#10;volume_counter = 1&amp;#10;volume_total = 138 # (10.0 sec x 3) + (6.0 sec x 12) + (3.0 sec x 12)&amp;#10;&amp;#10;start_time = 0&amp;#10;current_time = 0&amp;#10;&amp;#10;# Create clocks to keep track of the time&amp;#10;timer = core.Clock()&amp;#10;&amp;#10;# Create a global clock &amp;#10;Time_Since_Run = core.Clock()&amp;#10;&amp;#10;cross_time = 6.0 # Fixation cross duration&amp;#10;image_time = 3.0 # Stimulus duration&amp;#10;key_board_time = 3.0 # Keyboard response duration during trial&amp;#10;&amp;#10;Block_1_Run = 1&amp;#10;&amp;#10;# Create counters &amp;#10;block_loop_trials_counter = 0 # counter for trials in block loops&amp;#10;encode_trials_counter = 0 # counter for encode trials&amp;#10;recognition_trials_counter = 0 # counter for recognition trials&amp;#10;Block_Loop_Voulme_Counter = [] # To reset volume counter&amp;#10;&amp;#10;# Initialize the current encoding, recognition, and jitter indices for tracking the current image position and jitter time&amp;#10;current_encode_index = 0&amp;#10;current_recog_index = 0&amp;#10;current_jitter_index = 0&amp;#10;&amp;#10;# Initialize the current encoding key index for tracking the list condition in Encoding_Dictionary_Block_1_Run_1&amp;#10;current_encode_key_index = 0&amp;#10;&amp;#10;# Set flags for instruction display based on block and condition&amp;#10;Block_1_Run_1_Started = True # Assuming Block 1 Run 1 is first&amp;#10;Block_2_Run_2_Started = False # DELETE?&amp;#10;Block_3_Run_3_Started = False # DELETE?&amp;#10;Fix_Cross_Started = False # Becomes true after first stimulus &amp;#10;Encoding_Started = True # Encoding condition always first&amp;#10;Recognition_Started = False" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;var Block_1_Run, Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started, Block_Loop_Voulme_Counter, Encoding_Started, Fix_Cross_Started, Recognition_Started, Time_Since_Run, block_loop_trials_counter, cross_time, current_encode_index, current_encode_key_index, current_jitter_index, current_recog_index, current_time, encode_trials_counter, image_time, key_board_time, recognition_trials_counter, start_time, timer, volume_counter, volume_total;&amp;#10;volume_counter = 1;&amp;#10;volume_total = 138;&amp;#10;start_time = 0;&amp;#10;current_time = 0;&amp;#10;timer = new core.Clock();&amp;#10;Time_Since_Run = new core.Clock();&amp;#10;cross_time = 6.0;&amp;#10;image_time = 3.0;&amp;#10;key_board_time = 3.0;&amp;#10;Block_1_Run = 1;&amp;#10;block_loop_trials_counter = 0;&amp;#10;encode_trials_counter = 0;&amp;#10;recognition_trials_counter = 0;&amp;#10;Block_Loop_Voulme_Counter = [];&amp;#10;current_encode_index = 0;&amp;#10;current_recog_index = 0;&amp;#10;current_jitter_index = 0;&amp;#10;current_encode_key_index = 0;&amp;#10;Block_1_Run_1_Started = true;&amp;#10;Block_2_Run_2_Started = false;&amp;#10;Block_3_Run_3_Started = false;&amp;#10;Fix_Cross_Started = false;&amp;#10;Encoding_Started = true;&amp;#10;Recognition_Started = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="setUpCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="condLoader">
      <CodeComponent name="condLoaderCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import pandas as pd&amp;#10;import random &amp;#10;&amp;#10;#BLOCK 1 RUN 1&amp;#10;# Load encoding and recognition conditions and store in dataframe (df)&amp;#10;Block_1_Run_1_Conditions_file = 'conditions.xlsx'&amp;#10;Block_1_Run_1_Conditions_df = pd.read_excel(Block_1_Run_1_Conditions_file)&amp;#10;&amp;#10;# Load encoding conditions&amp;#10;Face_Encoding_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[0, 'cond_file']&amp;#10;Place_Encoding_Block_1_Run_1_file  = Block_1_Run_1_Conditions_df.loc[1, 'cond_file']&amp;#10;Pair_Encoding_Block_1_Run_1_file= Block_1_Run_1_Conditions_df.loc[2, 'cond_file']&amp;#10;&amp;#10;# Load recognition conditions&amp;#10;Face_Recog_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[3, 'cond_file']&amp;#10;Place_Recog_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[4, 'cond_file']&amp;#10;Pair_Recog_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[5, 'cond_file']&amp;#10;&amp;#10;# Store encoding conditions in dataframe (df)&amp;#10;Face_Encoding_Stimuli_Block_1_Run_1_df = pd.read_excel(Face_Encoding_Block_1_Run_1_file)&amp;#10;Place_Encoding_Stimuli_Block_1_Run_1_df = pd.read_excel(Place_Encoding_Block_1_Run_1_file)&amp;#10;Pair_Encoding_Stimuli_Block_1_Run_1_df = pd.read_excel(Pair_Encoding_Block_1_Run_1_file)&amp;#10;&amp;#10;# Store recognition conditions in dataframe (df)&amp;#10;Face_Recog_Stimuli_Block_1_Run_1_df = pd.read_excel(Face_Recog_Block_1_Run_1_file)&amp;#10;Place_Recog_Stimuli_Block_1_Run_1_df = pd.read_excel(Place_Recog_Block_1_Run_1_file)&amp;#10;Pair_Recog_Stimuli_Block_1_Run_1_df = pd.read_excel(Pair_Recog_Block_1_Run_1_file)&amp;#10;&amp;#10;# Create encoding list of images conditions&amp;#10;Face_Encoding_Images_Block_1_Run_1 = Face_Encoding_Stimuli_Block_1_Run_1_df[&quot;encoding_stims&quot;].tolist()&amp;#10;Place_Encoding_Images_Block_1_Run_1 = Place_Encoding_Stimuli_Block_1_Run_1_df[&quot;encoding_stims&quot;].tolist()&amp;#10;Pair_Encoding_Images_Block_1_Run_1 = Pair_Encoding_Stimuli_Block_1_Run_1_df[&quot;encoding_stims&quot;].tolist()&amp;#10;&amp;#10;# Create recognition list of images conditions&amp;#10;Face_Recog_Images_Block_1_Run_1 = Face_Recog_Stimuli_Block_1_Run_1_df[&quot;recog_stims&quot;].tolist()&amp;#10;Place_Recog_Images_Block_1_Run_1 = Place_Recog_Stimuli_Block_1_Run_1_df[&quot;recog_stims&quot;].tolist()&amp;#10;Pair_Recog_Images_Block_1_Run_1 = Pair_Recog_Stimuli_Block_1_Run_1_df[&quot;recog_stims&quot;].tolist()&amp;#10;&amp;#10;# Randomize each list&amp;#10;# BLOCK 1 RUN 1&amp;#10;random.shuffle(Face_Encoding_Images_Block_1_Run_1)&amp;#10;random.shuffle(Place_Encoding_Images_Block_1_Run_1)&amp;#10;random.shuffle(Pair_Encoding_Images_Block_1_Run_1)&amp;#10;&amp;#10;random.shuffle(Face_Recog_Images_Block_1_Run_1)&amp;#10;random.shuffle(Place_Recog_Images_Block_1_Run_1)&amp;#10;random.shuffle(Pair_Recog_Images_Block_1_Run_1)&amp;#10;&amp;#10;# Create a dictionary for encoding with keys for face, place, and pair encoding images&amp;#10;# and their respective randomized lists as values for Block 1 Run 1&amp;#10;Encoding_Dictionary_Block_1_Run_1 = {&amp;#10;    'Face_Encode_Key_Block_1_Run_1': Face_Encoding_Images_Block_1_Run_1,&amp;#10;    'Place_Encode_Key_Block_1_Run_1': Place_Encoding_Images_Block_1_Run_1,&amp;#10;    'Pair_Encode_Key_Block_1_Run_1': Pair_Encoding_Images_Block_1_Run_1&amp;#10;}&amp;#10;&amp;#10;# Create a dictionary for recognition with keys for face, place, and pair recognition images&amp;#10;# and their respective randomized lists as values for Block 1 Run 1&amp;#10;Recognition_Dictionary_Block_1_Run_1 = {&amp;#10;    'Face_Recog_Key_Block_1_Run_1': Face_Recog_Images_Block_1_Run_1,&amp;#10;    'Place_Recog_Key_Block_1_Run_1': Place_Recog_Images_Block_1_Run_1,&amp;#10;    'Pair_Recog_Key_Block_1_Run_1': Pair_Recog_Images_Block_1_Run_1&amp;#10;}" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as pd from 'pandas';&amp;#10;import * as random from 'random';&amp;#10;var Block_1_Run_1_Conditions_df, Block_1_Run_1_Conditions_file, Encoding_Dictionary_Block_1_Run_1, Face_Encoding_Block_1_Run_1_file, Face_Encoding_Images_Block_1_Run_1, Face_Encoding_Stimuli_Block_1_Run_1_df, Face_Recog_Block_1_Run_1_file, Face_Recog_Images_Block_1_Run_1, Face_Recog_Stimuli_Block_1_Run_1_df, Pair_Encoding_Block_1_Run_1_file, Pair_Encoding_Images_Block_1_Run_1, Pair_Encoding_Stimuli_Block_1_Run_1_df, Pair_Recog_Block_1_Run_1_file, Pair_Recog_Images_Block_1_Run_1, Pair_Recog_Stimuli_Block_1_Run_1_df, Place_Encoding_Block_1_Run_1_file, Place_Encoding_Images_Block_1_Run_1, Place_Encoding_Stimuli_Block_1_Run_1_df, Place_Recog_Block_1_Run_1_file, Place_Recog_Images_Block_1_Run_1, Place_Recog_Stimuli_Block_1_Run_1_df, Recognition_Dictionary_Block_1_Run_1;&amp;#10;Block_1_Run_1_Conditions_file = &quot;conditions.xlsx&quot;;&amp;#10;Block_1_Run_1_Conditions_df = pd.read_excel(Block_1_Run_1_Conditions_file);&amp;#10;Face_Encoding_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[[0, &quot;cond_file&quot;]];&amp;#10;Place_Encoding_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[[1, &quot;cond_file&quot;]];&amp;#10;Pair_Encoding_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[[2, &quot;cond_file&quot;]];&amp;#10;Face_Recog_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[[3, &quot;cond_file&quot;]];&amp;#10;Place_Recog_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[[4, &quot;cond_file&quot;]];&amp;#10;Pair_Recog_Block_1_Run_1_file = Block_1_Run_1_Conditions_df.loc[[5, &quot;cond_file&quot;]];&amp;#10;Face_Encoding_Stimuli_Block_1_Run_1_df = pd.read_excel(Face_Encoding_Block_1_Run_1_file);&amp;#10;Place_Encoding_Stimuli_Block_1_Run_1_df = pd.read_excel(Place_Encoding_Block_1_Run_1_file);&amp;#10;Pair_Encoding_Stimuli_Block_1_Run_1_df = pd.read_excel(Pair_Encoding_Block_1_Run_1_file);&amp;#10;Face_Recog_Stimuli_Block_1_Run_1_df = pd.read_excel(Face_Recog_Block_1_Run_1_file);&amp;#10;Place_Recog_Stimuli_Block_1_Run_1_df = pd.read_excel(Place_Recog_Block_1_Run_1_file);&amp;#10;Pair_Recog_Stimuli_Block_1_Run_1_df = pd.read_excel(Pair_Recog_Block_1_Run_1_file);&amp;#10;Face_Encoding_Images_Block_1_Run_1 = Face_Encoding_Stimuli_Block_1_Run_1_df[&quot;encoding_stims&quot;].tolist();&amp;#10;Place_Encoding_Images_Block_1_Run_1 = Place_Encoding_Stimuli_Block_1_Run_1_df[&quot;encoding_stims&quot;].tolist();&amp;#10;Pair_Encoding_Images_Block_1_Run_1 = Pair_Encoding_Stimuli_Block_1_Run_1_df[&quot;encoding_stims&quot;].tolist();&amp;#10;Face_Recog_Images_Block_1_Run_1 = Face_Recog_Stimuli_Block_1_Run_1_df[&quot;recog_stims&quot;].tolist();&amp;#10;Place_Recog_Images_Block_1_Run_1 = Place_Recog_Stimuli_Block_1_Run_1_df[&quot;recog_stims&quot;].tolist();&amp;#10;Pair_Recog_Images_Block_1_Run_1 = Pair_Recog_Stimuli_Block_1_Run_1_df[&quot;recog_stims&quot;].tolist();&amp;#10;random.shuffle(Face_Encoding_Images_Block_1_Run_1);&amp;#10;random.shuffle(Place_Encoding_Images_Block_1_Run_1);&amp;#10;random.shuffle(Pair_Encoding_Images_Block_1_Run_1);&amp;#10;random.shuffle(Face_Recog_Images_Block_1_Run_1);&amp;#10;random.shuffle(Place_Recog_Images_Block_1_Run_1);&amp;#10;random.shuffle(Pair_Recog_Images_Block_1_Run_1);&amp;#10;Encoding_Dictionary_Block_1_Run_1 = {&quot;Face_Encode_Key_Block_1_Run_1&quot;: Face_Encoding_Images_Block_1_Run_1, &quot;Place_Encode_Key_Block_1_Run_1&quot;: Place_Encoding_Images_Block_1_Run_1, &quot;Pair_Encode_Key_Block_1_Run_1&quot;: Pair_Encoding_Images_Block_1_Run_1};&amp;#10;Recognition_Dictionary_Block_1_Run_1 = {&quot;Face_Recog_Key_Block_1_Run_1&quot;: Face_Recog_Images_Block_1_Run_1, &quot;Place_Recog_Key_Block_1_Run_1&quot;: Place_Recog_Images_Block_1_Run_1, &quot;Pair_Recog_Key_Block_1_Run_1&quot;: Pair_Recog_Images_Block_1_Run_1};&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;        // add-on: list(s: string): string[]&amp;#10;        function list(s) {&amp;#10;            // if s is a string, we return a list of its characters&amp;#10;            if (typeof s === 'string')&amp;#10;                return s.split('');&amp;#10;            else&amp;#10;                // otherwise we return s:&amp;#10;                return s;&amp;#10;        }&amp;#10;&amp;#10;        import * as random from 'random';&amp;#10;var Encode_Key_List_Block_1_Run_1, Random_Encode_Key_Block_1_Run_1, Random_Encode_List_Block_1_Run_1, Recog_Key_Block_1_Run_1, Recog_List_Block_1_Run_1;&amp;#10;Encode_Key_List_Block_1_Run_1 = list(Encoding_Dictionary_Block_1_Run_1.keys());&amp;#10;random.shuffle(Encode_Key_List_Block_1_Run_1);&amp;#10;Random_Encode_Key_Block_1_Run_1 = Encode_Key_List_Block_1_Run_1[current_encode_key_index];&amp;#10;Random_Encode_List_Block_1_Run_1 = Encoding_Dictionary_Block_1_Run_1[Random_Encode_Key_Block_1_Run_1];&amp;#10;if ((Random_Encode_Key_Block_1_Run_1 === &quot;Face_Encode_Key_Block_1_Run_1&quot;)) {&amp;#10;    Recog_Key_Block_1_Run_1 = &quot;Face_Recog_Key_Block_1_Run_1&quot;;&amp;#10;} else {&amp;#10;    if ((Random_Encode_Key_Block_1_Run_1 === &quot;Place_Encode_Key_Block_1_Run_1&quot;)) {&amp;#10;        Recog_Key_Block_1_Run_1 = &quot;Place_Recog_Key_Block_1_Run_1&quot;;&amp;#10;    } else {&amp;#10;        if ((Random_Encode_Key_Block_1_Run_1 === &quot;Pair_Encode_Key_Block_1_Run_1&quot;)) {&amp;#10;            Recog_Key_Block_1_Run_1 = &quot;Pair_Recog_Key_Block_1_Run_1&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;Recog_List_Block_1_Run_1 = Recognition_Dictionary_Block_1_Run_1[Recog_Key_Block_1_Run_1];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import random&amp;#10;&amp;#10;# BLOCK 1 RUN 1&amp;#10;# Create a list of encoding dictionary keys and shuffle them&amp;#10;Encode_Key_List_Block_1_Run_1 = list(Encoding_Dictionary_Block_1_Run_1.keys())&amp;#10;random.shuffle(Encode_Key_List_Block_1_Run_1 )&amp;#10;&amp;#10;# Get a random encoding key and its corresponding encoding list from the shuffled keys&amp;#10;Random_Encode_Key_Block_1_Run_1 = Encode_Key_List_Block_1_Run_1[current_encode_key_index]&amp;#10;Random_Encode_List_Block_1_Run_1 = Encoding_Dictionary_Block_1_Run_1[Random_Encode_Key_Block_1_Run_1]&amp;#10;&amp;#10;# Determine the corresponding recognition key based on the chosen encoding key&amp;#10;if Random_Encode_Key_Block_1_Run_1  == 'Face_Encode_Key_Block_1_Run_1':&amp;#10;    Recog_Key_Block_1_Run_1 = 'Face_Recog_Key_Block_1_Run_1'&amp;#10;elif Random_Encode_Key_Block_1_Run_1 == 'Place_Encode_Key_Block_1_Run_1':&amp;#10;    Recog_Key_Block_1_Run_1 = 'Place_Recog_Key_Block_1_Run_1'&amp;#10;elif Random_Encode_Key_Block_1_Run_1 == 'Pair_Encode_Key_Block_1_Run_1':&amp;#10;    Recog_Key_Block_1_Run_1 = 'Pair_Recog_Key_Block_1_Run_1'&amp;#10;&amp;#10;# Get the corresponding recognition list based on the determined recognition key&amp;#10;Recog_List_Block_1_Run_1 = Recognition_Dictionary_Block_1_Run_1[Recog_Key_Block_1_Run_1]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="condLoaderCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="triggerSync">
      <CodeComponent name="triggerSyncCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trigger_sync_message = &quot;+&quot;;&amp;#10;if ((volume_counter === 1)) {&amp;#10;    trigger_sync_message = &quot;Waiting for scanner...&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trigger_sync_message = &quot;+&quot;&amp;#10;if volume_counter == 1:&amp;#10;    trigger_sync_message = &quot;Waiting for scanner...&quot;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="triggerSyncCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="triggerSyncText">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="triggerSyncText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$trigger_sync_message" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="triggerSync_Key_Resp">
        <Param val="'5','t','s'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="triggerSync_Key_Resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="InstructionsText">
      <CodeComponent name="InstructionCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.hardware import keyboard&amp;#10;from psychopy import core&amp;#10;&amp;#10;# Function to set instruction message and time&amp;#10;def set_instruction_time_and_message(Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started,&amp;#10;                                     Encoding_Started, Recognition_Started,&amp;#10;                                     Random_Encode_Key_Block_1_Run_1, Recog_Key_Block_1_Run_1&amp;#10;                                     ):&amp;#10;&amp;#10;    # Initialize variables&amp;#10;    Instruction_Message = &quot; &quot;&amp;#10;    Instruction_Time = 10.0  # Instruction screen time&amp;#10;&amp;#10;    # Block logic&amp;#10;    blocks_started = [Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started]&amp;#10;    random_encode_keys = [Random_Encode_Key_Block_1_Run_1]&amp;#10;    recog_keys = [Recog_Key_Block_1_Run_1]&amp;#10;&amp;#10;    for i in range(len(blocks_started)):&amp;#10;        if blocks_started[i] and not any(blocks_started[:i] + blocks_started[i+1:]):&amp;#10;            if Encoding_Started:&amp;#10;                if random_encode_keys[i] == f'Face_Encode_Key_Block_{i+1}_Run_{i+1}':&amp;#10;                    Instruction_Message = Face_Encoding_Text&amp;#10;                elif random_encode_keys[i] == f'Place_Encode_Key_Block_{i+1}_Run_{i+1}':&amp;#10;                    Instruction_Message = Place_Encoding_Text&amp;#10;                elif random_encode_keys[i] == f'Pair_Encode_Key_Block_{i+1}_Run_{i+1}':&amp;#10;                    Instruction_Message = Pair_Encoding_Text&amp;#10;&amp;#10;            elif Recognition_Started:&amp;#10;                if recog_keys[i] == f'Face_Recog_Key_Block_{i+1}_Run_{i+1}':&amp;#10;                    Instruction_Message = Face_Recog_Text&amp;#10;                elif recog_keys[i] == f'Place_Recog_Key_Block_{i+1}_Run_{i+1}':&amp;#10;                    Instruction_Message = Place_Recog_Text&amp;#10;                elif recog_keys[i] == f'Pair_Recog_Key_Block_{i+1}_Run_{i+1}':&amp;#10;                    Instruction_Message = Pair_Recog_Text&amp;#10;&amp;#10;    return Instruction_Time, Instruction_Message&amp;#10;&amp;#10;&amp;#10;                                &amp;#10;kb = keyboard.Keyboard()&amp;#10;timer_key = core.Clock()&amp;#10;start_time_key = 0&amp;#10;current_time_key = 0&amp;#10;&amp;#10;# Text for encoding instruction screen &amp;#10;# Face encoding condition text&amp;#10;Face_Encoding_Text = &quot;&quot;&quot;&amp;#10;Male or female?&amp;#10;&amp;#10;Index = male&amp;#10;Middle = female&amp;#10;&amp;#10;&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;# Place encoding condition text&amp;#10;Place_Encoding_Text = &quot;&quot;&quot;&amp;#10;Is there water in the scene?&amp;#10;&amp;#10;Index = yes&amp;#10;Middle = no&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;# Pair encoding condition text&amp;#10;Pair_Encoding_Text = &quot;&quot;&quot;&amp;#10;Does the face &quot;fit&quot; with the scene?&amp;#10;&amp;#10;Index = yes&amp;#10;Middle = no&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;# Text for recognition instruction screen &amp;#10;# Face recognition condition text&amp;#10;Face_Recog_Text = &quot;&quot;&quot;&amp;#10;Was this face shown before?&amp;#10;&amp;#10;Index = yes&amp;#10;Middle = no&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;# Place recognition condition text&amp;#10;Place_Recog_Text = &quot;&quot;&quot;&amp;#10;Was this scene shown before?&amp;#10;&amp;#10;Index = yes&amp;#10;Middle = no&amp;#10;&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;# Pair recognition condition text&amp;#10;Pair_Recog_Text = &quot;&quot;&quot;&amp;#10;Was this face shown together with this scene before?&amp;#10;&amp;#10;Index = yes&amp;#10;Middle = no&amp;#10;&amp;#10;&quot;&quot;&quot;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {keyboard} from 'psychopy/hardware';&amp;#10;import {core} from 'psychopy';&amp;#10;var Face_Encoding_Text, Face_Recog_Text, Pair_Encoding_Text, Pair_Recog_Text, Place_Encoding_Text, Place_Recog_Text, current_time_key, kb, start_time_key, timer_key;&amp;#10;function set_instruction_time_and_message(Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started, Encoding_Started, Recognition_Started, Random_Encode_Key_Block_1_Run_1, Recog_Key_Block_1_Run_1) {&amp;#10;    var Instruction_Message, Instruction_Time, blocks_started, random_encode_keys, recog_keys;&amp;#10;    Instruction_Message = &quot; &quot;;&amp;#10;    Instruction_Time = 10.0;&amp;#10;    blocks_started = [Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started];&amp;#10;    random_encode_keys = [Random_Encode_Key_Block_1_Run_1];&amp;#10;    recog_keys = [Recog_Key_Block_1_Run_1];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(blocks_started.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((blocks_started[i] &amp;&amp; (! any((blocks_started.slice(0, i) + blocks_started.slice((i + 1))))))) {&amp;#10;            if (Encoding_Started) {&amp;#10;                if ((random_encode_keys[i] === `Face_Encode_Key_Block_${(i + 1)}_Run_${(i + 1)}`)) {&amp;#10;                    Instruction_Message = Face_Encoding_Text;&amp;#10;                } else {&amp;#10;                    if ((random_encode_keys[i] === `Place_Encode_Key_Block_${(i + 1)}_Run_${(i + 1)}`)) {&amp;#10;                        Instruction_Message = Place_Encoding_Text;&amp;#10;                    } else {&amp;#10;                        if ((random_encode_keys[i] === `Pair_Encode_Key_Block_${(i + 1)}_Run_${(i + 1)}`)) {&amp;#10;                            Instruction_Message = Pair_Encoding_Text;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if (Recognition_Started) {&amp;#10;                    if ((recog_keys[i] === `Face_Recog_Key_Block_${(i + 1)}_Run_${(i + 1)}`)) {&amp;#10;                        Instruction_Message = Face_Recog_Text;&amp;#10;                    } else {&amp;#10;                        if ((recog_keys[i] === `Place_Recog_Key_Block_${(i + 1)}_Run_${(i + 1)}`)) {&amp;#10;                            Instruction_Message = Place_Recog_Text;&amp;#10;                        } else {&amp;#10;                            if ((recog_keys[i] === `Pair_Recog_Key_Block_${(i + 1)}_Run_${(i + 1)}`)) {&amp;#10;                                Instruction_Message = Pair_Recog_Text;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    return [Instruction_Time, Instruction_Message];&amp;#10;}&amp;#10;kb = new keyboard.Keyboard();&amp;#10;timer_key = new core.Clock();&amp;#10;start_time_key = 0;&amp;#10;current_time_key = 0;&amp;#10;Face_Encoding_Text = &quot;\nMale or female?\n\nIndex = male\nMiddle = female\n\n\n\n&quot;;&amp;#10;Place_Encoding_Text = &quot;\nIs there water in the scene?\n\nIndex = yes\nMiddle = no\n\n&quot;;&amp;#10;Pair_Encoding_Text = &quot;\nDoes the face \&quot;fit\&quot; with the scene?\n\nIndex = yes\nMiddle = no\n\n&quot;;&amp;#10;Face_Recog_Text = &quot;\nWas this face shown before?\n\nIndex = yes\nMiddle = no\n\n&quot;;&amp;#10;Place_Recog_Text = &quot;\nWas this scene shown before?\n\nIndex = yes\nMiddle = no\n\n&quot;;&amp;#10;Pair_Recog_Text = &quot;\nWas this face shown together with this scene before?\n\nIndex = yes\nMiddle = no\n\n&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((volume_counter === 1)) {&amp;#10;    start_time = timer.getTime();&amp;#10;}&amp;#10;[Instruction_Time, Instruction_Message] = set_instruction_time_and_message(Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started, Encoding_Started, Recognition_Started, Random_Encode_Key_Block_1_Run_1, Recog_Key_Block_1_Run_1);&amp;#10;current_time = (timer.getTime() - start_time);&amp;#10;psychoJS.experiment.addData(&quot;start_time&quot;, current_time);&amp;#10;psychoJS.experiment.addData(&quot;start_volume&quot;, volume_counter);&amp;#10;kb.clock.reset();&amp;#10;volume_counter_message = ((volume_counter.toString() + &quot; out of &quot;) + volume_total.toString());&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if(volume_counter == 1):&amp;#10;    start_time = timer.getTime();&amp;#10;    &amp;#10;# Set Instruction Message and time to 10.0 if not fixation cross&amp;#10;Instruction_Time, Instruction_Message = set_instruction_time_and_message(&amp;#10;    Block_1_Run_1_Started, Block_2_Run_2_Started, Block_3_Run_3_Started,&amp;#10;    Encoding_Started, Recognition_Started,&amp;#10;    Random_Encode_Key_Block_1_Run_1, Recog_Key_Block_1_Run_1&amp;#10;    &amp;#10;)&amp;#10;&amp;#10;current_time = timer.getTime() - start_time&amp;#10;thisExp.addData('start_time',current_time)&amp;#10;&amp;#10;thisExp.addData('start_volume',volume_counter)&amp;#10;kb.clock.reset()  # when you want to start the timer from&amp;#10;volume_counter_message = str(volume_counter)+&quot; out of &quot;+str(volume_total)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# during your trial&amp;#10;keys = kb.getKeys(['5','t','s'], waitRelease=True)&amp;#10;for key in keys:&amp;#10;    if volume_counter &lt;= 1:&amp;#10;        start_time_key = timer_key.getTime()&amp;#10;        current_time_key = timer_key.getTime() - start_time_key&amp;#10;    else:&amp;#10;        current_time_key = timer_key.getTime() - start_time_key&amp;#10;        start_time_key = timer_key.getTime()&amp;#10;    &amp;#10;    thisExp.addData('trigger_time', current_time_key)&amp;#10;    &amp;#10;    thisExp.addData('end_volume',volume_counter)&amp;#10;    volume_counter_message = str(volume_counter)+&quot; out of &quot;+str(volume_total)&amp;#10;    volume_counter += 1&amp;#10;    print(volume_counter_message)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="keys = kb.getKeys([&quot;5&quot;, &quot;t&quot;, &quot;s&quot;], {&quot;waitRelease&quot;: true});&amp;#10;for (var key, _pj_c = 0, _pj_a = keys, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    key = _pj_a[_pj_c];&amp;#10;    if ((volume_counter &lt;= 1)) {&amp;#10;        start_time_key = timer_key.getTime();&amp;#10;        current_time_key = (timer_key.getTime() - start_time_key);&amp;#10;    } else {&amp;#10;        current_time_key = (timer_key.getTime() - start_time_key);&amp;#10;        start_time_key = timer_key.getTime();&amp;#10;    }&amp;#10;    psychoJS.experiment.addData(&quot;trigger_time&quot;, current_time_key);&amp;#10;    psychoJS.experiment.addData(&quot;end_volume&quot;, volume_counter);&amp;#10;    volume_counter_message = ((volume_counter.toString() + &quot; out of &quot;) + volume_total.toString());&amp;#10;    volume_counter += 1;&amp;#10;    console.log(volume_counter_message);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="InstructionCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="InstructionText">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="InstructionText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Instruction_Message" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="encodeTrial_Run1">
      <CodeComponent name="encodeTrialRun1Code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.hardware import keyboard&amp;#10;from psychopy import core&amp;#10;&amp;#10;# Function to store encode condition status and subject response&amp;#10;def update_encode_pre_recog_response_data(block_num, run_num, current_displayed_image, random_encode_key, response_key, liquid_conditions):&amp;#10;    gender_is_correct = None&amp;#10;    liquid_is_correct = None&amp;#10;    response_pair_fit = None&amp;#10;&amp;#10;    image_gender = None&amp;#10;    response_gender = None&amp;#10;    image_water = None&amp;#10;    response_water = None&amp;#10;    response_pair_fit = None&amp;#10;&amp;#10;    # Face encode condition&amp;#10;    if random_encode_key == f'Face_Encode_Key_Block_{block_num}_Run_{run_num}':&amp;#10;         image_gender = 'male' if 'om' in current_displayed_image or 'ym' in current_displayed_image else 'female'&amp;#10;         &amp;#10;         if response_key == '1':&amp;#10;            response_gender = 'male'&amp;#10;         elif response_key == '2':&amp;#10;            response_gender = 'female'&amp;#10;         else:&amp;#10;            response_gender = 'none'&amp;#10;         &amp;#10;         gender_is_correct = 'NO RESPONSE' if response_gender == 'none' else response_gender == image_gender&amp;#10;    &amp;#10;    # Place encode condition&amp;#10;    elif random_encode_key == f'Place_Encode_Key_Block_{block_num}_Run_{run_num}':&amp;#10;        image_water = 'no_liquid'&amp;#10;        for substr in liquid_conditions:&amp;#10;            if substr in current_displayed_image:&amp;#10;                image_water = 'liquid'&amp;#10;                break&amp;#10;    &amp;#10;        if response_key == '1':&amp;#10;            response_water = 'liquid'&amp;#10;        elif response_key == '2':&amp;#10;            response_water = 'no_liquid'&amp;#10;        else:&amp;#10;            response_water = 'none'&amp;#10;   &amp;#10;        liquid_is_correct = 'NO RESPONSE' if response_water == 'none' else response_water == image_water&amp;#10;    &amp;#10;    # Pair encode condition&amp;#10;    elif random_encode_key == f'Pair_Encode_Key_Block_{block_num}_Run_{run_num}':&amp;#10;        &amp;#10;        if response_key == '1':&amp;#10;            response_pair_fit = 'fits'&amp;#10;        elif response_key == '2':&amp;#10;            response_pair_fit = 'does_not_fit'&amp;#10;        else:&amp;#10;            response_pair_fit = 'none'&amp;#10;&amp;#10;    return gender_is_correct, liquid_is_correct, response_pair_fit, image_gender, response_gender, image_water, response_water, response_pair_fit&amp;#10;&amp;#10;kb = keyboard.Keyboard()&amp;#10;timer_key = core.Clock()&amp;#10;start_time_key = 0&amp;#10;current_time_key = 0&amp;#10;&amp;#10;# Initialize the encoding lists to store encoding txt data&amp;#10;Encoding_Data_Face_Block_1_Run_1 = []&amp;#10;Encoding_Data_Place_Block_1_Run_1 = []&amp;#10;Encoding_Data_Pair_Block_1_Run_1 = []&amp;#10;&amp;#10;# Initialize the encoding response data as dictionaries&amp;#10;Encoding_Response_Data_Face_Block_1_Run_1 = {}&amp;#10;Encoding_Response_Data_Place_Block_1_Run_1 = {}&amp;#10;Encoding_Response_Data_Pair_Block_1_Run_1 = {}&amp;#10;&amp;#10;# Initialize the image_start_time variable&amp;#10;image_start_time = 0&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {keyboard} from 'psychopy/hardware';&amp;#10;import {core} from 'psychopy';&amp;#10;var _pj;&amp;#10;var Encoding_Data_Face_Block_1_Run_1, Encoding_Data_Pair_Block_1_Run_1, Encoding_Data_Place_Block_1_Run_1, Encoding_Response_Data_Face_Block_1_Run_1, Encoding_Response_Data_Pair_Block_1_Run_1, Encoding_Response_Data_Place_Block_1_Run_1, current_time_key, image_start_time, kb, start_time_key, timer_key;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;function update_encode_pre_recog_response_data(block_num, run_num, current_displayed_image, random_encode_key, response_key, liquid_conditions) {&amp;#10;    var gender_is_correct, image_gender, image_water, liquid_is_correct, response_gender, response_pair_fit, response_water;&amp;#10;    gender_is_correct = null;&amp;#10;    liquid_is_correct = null;&amp;#10;    response_pair_fit = null;&amp;#10;    image_gender = null;&amp;#10;    response_gender = null;&amp;#10;    image_water = null;&amp;#10;    response_water = null;&amp;#10;    response_pair_fit = null;&amp;#10;    if ((random_encode_key === `Face_Encode_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;        image_gender = ((_pj.in_es6(&quot;om&quot;, current_displayed_image) || _pj.in_es6(&quot;ym&quot;, current_displayed_image)) ? &quot;male&quot; : &quot;female&quot;);&amp;#10;        if ((response_key === &quot;1&quot;)) {&amp;#10;            response_gender = &quot;male&quot;;&amp;#10;        } else {&amp;#10;            if ((response_key === &quot;2&quot;)) {&amp;#10;                response_gender = &quot;female&quot;;&amp;#10;            } else {&amp;#10;                response_gender = &quot;none&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;        gender_is_correct = ((response_gender === &quot;none&quot;) ? &quot;NO RESPONSE&quot; : (response_gender === image_gender));&amp;#10;    } else {&amp;#10;        if ((random_encode_key === `Place_Encode_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;            image_water = &quot;no_liquid&quot;;&amp;#10;            for (var substr, _pj_c = 0, _pj_a = liquid_conditions, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                substr = _pj_a[_pj_c];&amp;#10;                if (_pj.in_es6(substr, current_displayed_image)) {&amp;#10;                    image_water = &quot;liquid&quot;;&amp;#10;                    break;&amp;#10;                }&amp;#10;            }&amp;#10;            if ((response_key === &quot;1&quot;)) {&amp;#10;                response_water = &quot;liquid&quot;;&amp;#10;            } else {&amp;#10;                if ((response_key === &quot;2&quot;)) {&amp;#10;                    response_water = &quot;no_liquid&quot;;&amp;#10;                } else {&amp;#10;                    response_water = &quot;none&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            liquid_is_correct = ((response_water === &quot;none&quot;) ? &quot;NO RESPONSE&quot; : (response_water === image_water));&amp;#10;        } else {&amp;#10;            if ((random_encode_key === `Pair_Encode_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;                if ((response_key === &quot;1&quot;)) {&amp;#10;                    response_pair_fit = &quot;fits&quot;;&amp;#10;                } else {&amp;#10;                    if ((response_key === &quot;2&quot;)) {&amp;#10;                        response_pair_fit = &quot;does_not_fit&quot;;&amp;#10;                    } else {&amp;#10;                        response_pair_fit = &quot;none&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    return [gender_is_correct, liquid_is_correct, response_pair_fit, image_gender, response_gender, image_water, response_water, response_pair_fit];&amp;#10;}&amp;#10;kb = new keyboard.Keyboard();&amp;#10;timer_key = new core.Clock();&amp;#10;start_time_key = 0;&amp;#10;current_time_key = 0;&amp;#10;Encoding_Data_Face_Block_1_Run_1 = [];&amp;#10;Encoding_Data_Place_Block_1_Run_1 = [];&amp;#10;Encoding_Data_Pair_Block_1_Run_1 = [];&amp;#10;Encoding_Response_Data_Face_Block_1_Run_1 = {};&amp;#10;Encoding_Response_Data_Place_Block_1_Run_1 = {};&amp;#10;Encoding_Response_Data_Pair_Block_1_Run_1 = {};&amp;#10;image_start_time = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;start_volume&quot;, volume_counter);&amp;#10;kb.clock.reset();&amp;#10;volume_counter_message = ((volume_counter.toString() + &quot; out of &quot;) + volume_total.toString());&amp;#10;current_time_key = 0;&amp;#10;current_displayed_image = Random_Encode_List_Block_1_Run_1[current_encode_index];&amp;#10;psychoJS.experiment.addData(&quot;image_file&quot;, current_displayed_image);&amp;#10;psychoJS.experiment.addData(&quot;run&quot;, Block_1_Run);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Add the start time and volume counter to the data&amp;#10;thisExp.addData('start_volume',volume_counter)&amp;#10;&amp;#10;kb.clock.reset()  # when you want to start the timer from&amp;#10;volume_counter_message = str(volume_counter)+&quot; out of &quot;+str(volume_total)&amp;#10;&amp;#10;current_time_key = 0&amp;#10;&amp;#10;# Update the current_displayed_image variable&amp;#10;current_displayed_image = Random_Encode_List_Block_1_Run_1[current_encode_index]&amp;#10;&amp;#10;# Add the image_file data&amp;#10;thisExp.addData('image_file', current_displayed_image)&amp;#10;&amp;#10;# Add the run to the data&amp;#10;thisExp.addData('run', Block_1_Run)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# during your trial&amp;#10;keys = kb.getKeys(['5','t','s'], waitRelease=True)&amp;#10;for key in keys:&amp;#10;    if volume_counter &lt;= 1:&amp;#10;        start_time_key = timer_key.getTime()&amp;#10;        current_time_key = timer_key.getTime() - start_time_key&amp;#10;    else:&amp;#10;        current_time_key = timer_key.getTime() - start_time_key&amp;#10;        start_time_key = timer_key.getTime()&amp;#10;    &amp;#10;    thisExp.addData('trigger_time', current_time_key)&amp;#10;    &amp;#10;    thisExp.addData('end_volume',volume_counter)&amp;#10;    volume_counter_message = str(volume_counter)+&quot; out of &quot;+str(volume_total)&amp;#10;    volume_counter += 1&amp;#10;    print(volume_counter_message)&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="keys = kb.getKeys([&quot;5&quot;, &quot;t&quot;, &quot;s&quot;], {&quot;waitRelease&quot;: true});&amp;#10;for (var key, _pj_c = 0, _pj_a = keys, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    key = _pj_a[_pj_c];&amp;#10;    if ((volume_counter &lt;= 1)) {&amp;#10;        start_time_key = timer_key.getTime();&amp;#10;        current_time_key = (timer_key.getTime() - start_time_key);&amp;#10;    } else {&amp;#10;        current_time_key = (timer_key.getTime() - start_time_key);&amp;#10;        start_time_key = timer_key.getTime();&amp;#10;    }&amp;#10;    psychoJS.experiment.addData(&quot;trigger_time&quot;, current_time_key);&amp;#10;    psychoJS.experiment.addData(&quot;end_volume&quot;, volume_counter);&amp;#10;    volume_counter_message = ((volume_counter.toString() + &quot; out of &quot;) + volume_total.toString());&amp;#10;    volume_counter += 1;&amp;#10;    console.log(volume_counter_message);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="current_time = (timer.getTime() - start_time);&amp;#10;psychoJS.experiment.addData(&quot;end_time&quot;, current_time);&amp;#10;[gender_is_correct, liquid_is_correct, pair_fit_is_correct, image_gender, response_gender, image_water, response_water, response_pair_fit] = update_encode_pre_recog_response_data({&quot;block_num&quot;: 1, &quot;run_num&quot;: Block_1_Run, &quot;current_displayed_image&quot;: current_displayed_image, &quot;random_encode_key&quot;: Random_Encode_Key_Block_1_Run_1, &quot;response_key&quot;: encodeTrialTestKeyRespRun1.keys, &quot;liquid_conditions&quot;: [&quot;beach2&quot;, &quot;beach3&quot;, &quot;city1&quot;, &quot;citybeach10&quot;, &quot;hills13&quot;, &quot;hills15&quot;]});&amp;#10;if ((gender_is_correct !== null)) {&amp;#10;    psychoJS.experiment.addData(&quot;image_gender&quot;, image_gender);&amp;#10;    psychoJS.experiment.addData(&quot;response_gender&quot;, response_gender);&amp;#10;    psychoJS.experiment.addData(&quot;gender_is_correct&quot;, gender_is_correct);&amp;#10;}&amp;#10;if ((liquid_is_correct !== null)) {&amp;#10;    psychoJS.experiment.addData(&quot;image_water&quot;, image_water);&amp;#10;    psychoJS.experiment.addData(&quot;response_water&quot;, response_water);&amp;#10;    psychoJS.experiment.addData(&quot;liquid_is_correct&quot;, liquid_is_correct);&amp;#10;}&amp;#10;if ((response_pair_fit !== null)) {&amp;#10;    psychoJS.experiment.addData(&quot;response_pair_fit&quot;, response_pair_fit);&amp;#10;}&amp;#10;Block_Loop_Voulme_Counter.push(Block1Loop.thisRepN);&amp;#10;current_encode_index += 1;&amp;#10;if ((current_encode_index === 1)) {&amp;#10;    Fix_Cross_Started = true;&amp;#10;    encode_trials_counter += 1;&amp;#10;}&amp;#10;if ((current_encode_index === 12)) {&amp;#10;    current_encode_index = 0;&amp;#10;    current_encode_key_index += 1;&amp;#10;    current_jitter_index = 0;&amp;#10;    Encoding_Started = false;&amp;#10;    Fix_Cross_Started = false;&amp;#10;    Recognition_Started = true;&amp;#10;    if ((current_encode_key_index === 3)) {&amp;#10;        current_encode_key_index = 0;&amp;#10;    } else {&amp;#10;        Random_Encode_Key_Block_1_Run_1 = Encode_Key_List_Block_1_Run_1[current_encode_key_index];&amp;#10;        Random_Encode_List_Block_1_Run_1 = Encoding_Dictionary_Block_1_Run_1[Random_Encode_Key_Block_1_Run_1];&amp;#10;    }&amp;#10;}&amp;#10;if ((Fix_Cross_Started === true)) {&amp;#10;    current_jitter_index += 1;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Calculate and add the end time to the data&amp;#10;current_time = timer.getTime() - start_time&amp;#10;thisExp.addData('end_time', current_time)&amp;#10;&amp;#10;# Record encoding response&amp;#10;gender_is_correct, liquid_is_correct, pair_fit_is_correct, image_gender, response_gender, image_water, response_water, response_pair_fit = update_encode_pre_recog_response_data(&amp;#10;    block_num=1,&amp;#10;    run_num=Block_1_Run,&amp;#10;    current_displayed_image=current_displayed_image,&amp;#10;    random_encode_key=Random_Encode_Key_Block_1_Run_1,&amp;#10;    response_key=encodeTrialTestKeyRespRun1.keys,&amp;#10;    liquid_conditions=[&quot;beach2&quot;, &quot;beach3&quot;, &quot;city1&quot;, &quot;citybeach10&quot;, &quot;hills13&quot;,&quot;hills15&quot;]&amp;#10;)&amp;#10;&amp;#10;# Save encoding responses to output&amp;#10;if gender_is_correct is not None:&amp;#10;    thisExp.addData('image_gender', image_gender)&amp;#10;    thisExp.addData('response_gender', response_gender)&amp;#10;    thisExp.addData('gender_is_correct', gender_is_correct)&amp;#10;&amp;#10;if liquid_is_correct is not None:&amp;#10;    thisExp.addData('image_water', image_water)&amp;#10;    thisExp.addData('response_water', response_water)&amp;#10;    thisExp.addData('liquid_is_correct', liquid_is_correct)&amp;#10;&amp;#10;if response_pair_fit is not None:&amp;#10;    thisExp.addData('response_pair_fit', response_pair_fit)&amp;#10;&amp;#10;# For resetting volume_counter based on Block loop iteration &amp;#10;Block_Loop_Voulme_Counter.append(Block1Loop.thisRepN)&amp;#10;&amp;#10;# Increment the current encode index to iterate over images&amp;#10;current_encode_index += 1&amp;#10;&amp;#10;if current_encode_index == 1: # First stimulus is shown&amp;#10;    Fix_Cross_Started = True # Next ISI is '+'&amp;#10;    encode_trials_counter += 1&amp;#10;&amp;#10;if current_encode_index == 12: # Last stimulus is shown&amp;#10;    &amp;#10;    current_encode_index = 0 # Reset stimulus counter&amp;#10;    current_encode_key_index += 1 # Next encode condition&amp;#10;    current_jitter_index = 0 # Reset current jitter index&amp;#10;    &amp;#10;    Encoding_Started = False # End of encoding &amp;#10;    Fix_Cross_Started = False # Next ISI is instructions&amp;#10;    Recognition_Started = True # Start of recognition&amp;#10;    &amp;#10;        &amp;#10;    if current_encode_key_index == 3: # At last encoding condition&amp;#10;        current_encode_key_index = 0 # Reset encode condition order&amp;#10;    else:&amp;#10;        Random_Encode_Key_Block_1_Run_1 = Encode_Key_List_Block_1_Run_1[current_encode_key_index]&amp;#10;        Random_Encode_List_Block_1_Run_1 = Encoding_Dictionary_Block_1_Run_1[Random_Encode_Key_Block_1_Run_1]&amp;#10;     &amp;#10;if Fix_Cross_Started == True:&amp;#10;    current_jitter_index += 1&amp;#10; &amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="encodeTrialRun1Code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="encodeTrialRun1_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$Random_Encode_List_Block_1_Run_1[current_encode_index]" valType="file" updates="set every frame" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="encodeTrialRun1_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.33, 1.0)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="encodeFixationText_Run1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="encodeFixationText_Run1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="6.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="encodeTrialTestKeyRespRun1">
        <Param val="'1','2'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="encodeTrialTestKeyRespRun1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="6" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="recognitionTrial_Run1">
      <CodeComponent name="recognitonTrialRun1Code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from psychopy.hardware import keyboard&amp;#10;from psychopy import core&amp;#10;&amp;#10;# Function to store recognition response for d-prime&amp;#10;def d_prime(image_old_new, response_key):&amp;#10;    is_correct = None&amp;#10;&amp;#10;    # &quot;OLD&quot; images condition&amp;#10;    if image_old_new == &quot;OLD&quot;:&amp;#10;        if response_key == '1':&amp;#10;            is_correct = 'HIT'&amp;#10;        elif response_key == '2':&amp;#10;            is_correct = 'MISS'&amp;#10;        else:&amp;#10;            is_correct = 'NO RESPONSE'&amp;#10;&amp;#10;    # &quot;NEW&quot; images condition&amp;#10;    elif image_old_new == &quot;NEW&quot;:&amp;#10;        if response_key == '1':&amp;#10;            is_correct = 'FALSE ALARM'&amp;#10;        elif response_key == '2':&amp;#10;            is_correct = 'CORRECT REJECTION'&amp;#10;        else:&amp;#10;            is_correct = &quot;NO RESPONSE&quot;&amp;#10;&amp;#10;    return is_correct&amp;#10;&amp;#10;# Function to update encoding and recognition txt lists based on d - prime&amp;#10;def update_encoding_recognition_response_data( &amp;#10;    block_num,  &amp;#10;    run_num, &amp;#10;    is_correct, &amp;#10;    current_displayed_image, &amp;#10;    recog_key, &amp;#10;    image_start_time, &amp;#10;    image_time, &amp;#10;    recog_response_data_face, &amp;#10;    recog_response_data_place, &amp;#10;    recog_response_data_pair, &amp;#10;    encoding_response_data_face, &amp;#10;    encoding_response_data_place, &amp;#10;    encoding_response_data_pair&amp;#10;):&amp;#10;&amp;#10;    # If the response is correct&amp;#10;    if is_correct == 'HIT' or is_correct == 'CORRECT REJECTION':&amp;#10;        # Add to txt only if responses are correct &amp;#10;        if recog_key == f'Face_Recog_Key_Block_{block_num}_Run_{run_num}':&amp;#10;            recog_response_data_face.append([image_start_time, image_time, 1.000])&amp;#10;        elif recog_key == f'Place_Recog_Key_Block_{block_num}_Run_{run_num}':&amp;#10;            recog_response_data_place.append([image_start_time, image_time, 1.000])&amp;#10;        elif recog_key == f'Pair_Recog_Key_Block_{block_num}_Run_{run_num}':&amp;#10;            recog_response_data_pair.append([image_start_time, image_time, 1.000])&amp;#10;&amp;#10;    else: &amp;#10;        # If the response is incorrect or no response, remove the data for the image from encoding txt response&amp;#10;        &amp;#10;        # Modify the recognition image path to match the encoding phase image path&amp;#10;        encoding_image_path = current_displayed_image.replace('_Recog', '_Encoding')&amp;#10;&amp;#10;        if recog_key == f'Face_Recog_Key_Block_{block_num}_Run_{run_num}':&amp;#10;            if encoding_image_path in encoding_response_data_face:&amp;#10;                encoding_response_data_face.pop(encoding_image_path, None)&amp;#10;        elif recog_key == f'Place_Recog_Key_Block_{block_num}_Run_{run_num}':&amp;#10;            if encoding_image_path in encoding_response_data_place:&amp;#10;                encoding_response_data_place.pop(encoding_image_path, None)&amp;#10;        elif recog_key == f'Pair_Recog_Key_Block_{block_num}_Run_{run_num}':&amp;#10;            if encoding_image_path in encoding_response_data_pair:&amp;#10;                encoding_response_data_pair.pop(encoding_image_path, None)&amp;#10;&amp;#10;&amp;#10;# Create a keyboard object and a timer for the keyboard&amp;#10;kb = keyboard.Keyboard()&amp;#10;timer_key = core.Clock()&amp;#10;&amp;#10;start_time_key = 0&amp;#10;current_time_key = 0&amp;#10;&amp;#10;# Initialize the recognition lists to store recognition data&amp;#10;Recog_Data_Face_Block_1_Run_1 = []&amp;#10;Recog_Data_Place_Block_1_Run_1 = []&amp;#10;Recog_Data_Pair_Block_1_Run_1 = []&amp;#10;&amp;#10;# Initialize the encoding lists to store encoding txt data based on recognition responses&amp;#10;Recog_Response_Data_Face_Block_1_Run_1 = []&amp;#10;Recog_Response_Data_Place_Block_1_Run_1 = []&amp;#10;Recog_Response_Data_Pair_Block_1_Run_1 = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {keyboard} from 'psychopy/hardware';&amp;#10;import {core} from 'psychopy';&amp;#10;var _pj;&amp;#10;var Recog_Data_Face_Block_1_Run_1, Recog_Data_Pair_Block_1_Run_1, Recog_Data_Place_Block_1_Run_1, Recog_Response_Data_Face_Block_1_Run_1, Recog_Response_Data_Pair_Block_1_Run_1, Recog_Response_Data_Place_Block_1_Run_1, current_time_key, kb, start_time_key, timer_key;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;function $prime(image_old_new, response_key) {&amp;#10;    var is_correct;&amp;#10;    is_correct = null;&amp;#10;    if ((image_old_new === &quot;OLD&quot;)) {&amp;#10;        if ((response_key === &quot;1&quot;)) {&amp;#10;            is_correct = &quot;HIT&quot;;&amp;#10;        } else {&amp;#10;            if ((response_key === &quot;2&quot;)) {&amp;#10;                is_correct = &quot;MISS&quot;;&amp;#10;            } else {&amp;#10;                is_correct = &quot;NO RESPONSE&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((image_old_new === &quot;NEW&quot;)) {&amp;#10;            if ((response_key === &quot;1&quot;)) {&amp;#10;                is_correct = &quot;FALSE ALARM&quot;;&amp;#10;            } else {&amp;#10;                if ((response_key === &quot;2&quot;)) {&amp;#10;                    is_correct = &quot;CORRECT REJECTION&quot;;&amp;#10;                } else {&amp;#10;                    is_correct = &quot;NO RESPONSE&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    return is_correct;&amp;#10;}&amp;#10;function update_encoding_recognition_response_data(block_num, run_num, is_correct, current_displayed_image, recog_key, image_start_time, image_time, recog_response_data_face, recog_response_data_place, recog_response_data_pair, encoding_response_data_face, encoding_response_data_place, encoding_response_data_pair) {&amp;#10;    var encoding_image_path;&amp;#10;    if (((is_correct === &quot;HIT&quot;) || (is_correct === &quot;CORRECT REJECTION&quot;))) {&amp;#10;        if ((recog_key === `Face_Recog_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;            recog_response_data_face.push([image_start_time, image_time, 1.0]);&amp;#10;        } else {&amp;#10;            if ((recog_key === `Place_Recog_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;                recog_response_data_place.push([image_start_time, image_time, 1.0]);&amp;#10;            } else {&amp;#10;                if ((recog_key === `Pair_Recog_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;                    recog_response_data_pair.push([image_start_time, image_time, 1.0]);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        encoding_image_path = current_displayed_image.replace(&quot;_Recog&quot;, &quot;_Encoding&quot;);&amp;#10;        if ((recog_key === `Face_Recog_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;            if (_pj.in_es6(encoding_image_path, encoding_response_data_face)) {&amp;#10;                encoding_response_data_face.pop(encoding_image_path, null);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((recog_key === `Place_Recog_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;                if (_pj.in_es6(encoding_image_path, encoding_response_data_place)) {&amp;#10;                    encoding_response_data_place.pop(encoding_image_path, null);&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((recog_key === `Pair_Recog_Key_Block_${block_num}_Run_${run_num}`)) {&amp;#10;                    if (_pj.in_es6(encoding_image_path, encoding_response_data_pair)) {&amp;#10;                        encoding_response_data_pair.pop(encoding_image_path, null);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;kb = new keyboard.Keyboard();&amp;#10;timer_key = new core.Clock();&amp;#10;start_time_key = 0;&amp;#10;current_time_key = 0;&amp;#10;Recog_Data_Face_Block_1_Run_1 = [];&amp;#10;Recog_Data_Place_Block_1_Run_1 = [];&amp;#10;Recog_Data_Pair_Block_1_Run_1 = [];&amp;#10;Recog_Response_Data_Face_Block_1_Run_1 = [];&amp;#10;Recog_Response_Data_Place_Block_1_Run_1 = [];&amp;#10;Recog_Response_Data_Pair_Block_1_Run_1 = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;start_volume&quot;, volume_counter);&amp;#10;kb.clock.reset();&amp;#10;volume_counter_message = ((volume_counter.toString() + &quot; out of &quot;) + volume_total.toString());&amp;#10;current_time_key = 0;&amp;#10;current_displayed_image = Recog_List_Block_1_Run_1[current_recog_index];&amp;#10;psychoJS.experiment.addData(&quot;image_file&quot;, current_displayed_image);&amp;#10;psychoJS.experiment.addData(&quot;run&quot;, Block_1_Run);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Add the start time and volume counter to the data&amp;#10;thisExp.addData('start_volume', volume_counter)&amp;#10;&amp;#10;# Reset the keyboard clock&amp;#10;kb.clock.reset()  # when you want to start the timer from&amp;#10;&amp;#10;# Set the volume counter message&amp;#10;volume_counter_message = str(volume_counter) + &quot; out of &quot; + str(volume_total)&amp;#10;&amp;#10;current_time_key = 0&amp;#10;&amp;#10;# Update the current_displayed_image variable&amp;#10;current_displayed_image = Recog_List_Block_1_Run_1[current_recog_index]&amp;#10;&amp;#10;# Add the current_displayed_image to the data&amp;#10;thisExp.addData('image_file', current_displayed_image)&amp;#10;&amp;#10;# Add the run to the data&amp;#10;thisExp.addData('run', Block_1_Run)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# during your trial&amp;#10;keys = kb.getKeys(['5','t','s'], waitRelease=True)&amp;#10;for key in keys:&amp;#10;    if volume_counter &lt;= 1:&amp;#10;        start_time_key = timer_key.getTime()&amp;#10;        current_time_key = timer_key.getTime() - start_time_key&amp;#10;    else:&amp;#10;        current_time_key = timer_key.getTime() - start_time_key&amp;#10;        start_time_key = timer_key.getTime()&amp;#10;    &amp;#10;    thisExp.addData('trigger_time', current_time_key)&amp;#10;    &amp;#10;    thisExp.addData('end_volume',volume_counter)&amp;#10;    volume_counter_message = str(volume_counter)+&quot; out of &quot;+str(volume_total)&amp;#10;    volume_counter += 1&amp;#10;    print(volume_counter_message)&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="keys = kb.getKeys([&quot;5&quot;, &quot;t&quot;, &quot;s&quot;], {&quot;waitRelease&quot;: true});&amp;#10;for (var key, _pj_c = 0, _pj_a = keys, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    key = _pj_a[_pj_c];&amp;#10;    if ((volume_counter &lt;= 1)) {&amp;#10;        start_time_key = timer_key.getTime();&amp;#10;        current_time_key = (timer_key.getTime() - start_time_key);&amp;#10;    } else {&amp;#10;        current_time_key = (timer_key.getTime() - start_time_key);&amp;#10;        start_time_key = timer_key.getTime();&amp;#10;    }&amp;#10;    psychoJS.experiment.addData(&quot;trigger_time&quot;, current_time_key);&amp;#10;    psychoJS.experiment.addData(&quot;end_volume&quot;, volume_counter);&amp;#10;    volume_counter_message = ((volume_counter.toString() + &quot; out of &quot;) + volume_total.toString());&amp;#10;    volume_counter += 1;&amp;#10;    console.log(volume_counter_message);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;current_time = (timer.getTime() - start_time);&amp;#10;psychoJS.experiment.addData(&quot;end_time&quot;, current_time);&amp;#10;image_name = Recog_List_Block_1_Run_1[current_recog_index];&amp;#10;if (_pj.in_es6(&quot;OLD&quot;, image_name)) {&amp;#10;    image_old_new = &quot;OLD&quot;;&amp;#10;} else {&amp;#10;    image_old_new = &quot;NEW&quot;;&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;image_old_new&quot;, image_old_new);&amp;#10;if ((recogTrialTestKeyRespRun1.keys === &quot;1&quot;)) {&amp;#10;    response_old_new = &quot;OLD&quot;;&amp;#10;} else {&amp;#10;    if ((recogTrialTestKeyRespRun1.keys === &quot;2&quot;)) {&amp;#10;        response_old_new = &quot;NEW&quot;;&amp;#10;    } else {&amp;#10;        response_old_new = &quot;NONE&quot;;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;response_old_new&quot;, response_old_new);&amp;#10;is_correct = $prime({&quot;image_old_new&quot;: image_old_new, &quot;response_key&quot;: recogTrialTestKeyRespRun1.keys});&amp;#10;psychoJS.experiment.addData(&quot;is_correct&quot;, is_correct);&amp;#10;update_encoding_recognition_response_data({&quot;block_num&quot;: 1, &quot;run_num&quot;: Block_1_Run, &quot;is_correct&quot;: is_correct, &quot;current_displayed_image&quot;: current_displayed_image, &quot;recog_key&quot;: Recog_Key_Block_1_Run_1, &quot;image_start_time&quot;: image_start_time, &quot;image_time&quot;: image_time, &quot;recog_response_data_face&quot;: Recog_Response_Data_Face_Block_1_Run_1, &quot;recog_response_data_place&quot;: Recog_Response_Data_Place_Block_1_Run_1, &quot;recog_response_data_pair&quot;: Recog_Response_Data_Pair_Block_1_Run_1, &quot;encoding_response_data_face&quot;: Encoding_Response_Data_Face_Block_1_Run_1, &quot;encoding_response_data_place&quot;: Encoding_Response_Data_Place_Block_1_Run_1, &quot;encoding_response_data_pair&quot;: Encoding_Response_Data_Pair_Block_1_Run_1});&amp;#10;current_recog_index += 1;&amp;#10;if ((current_recog_index === 1)) {&amp;#10;    Fix_Cross_Started = true;&amp;#10;    recognition_trials_counter += 1;&amp;#10;}&amp;#10;if ((current_recog_index === 12)) {&amp;#10;    block_loop_trials_counter += 1;&amp;#10;    Recognition_Started = false;&amp;#10;    Fix_Cross_Started = false;&amp;#10;    Encoding_Started = true;&amp;#10;    current_recog_index = 0;&amp;#10;    current_jitter_index = 0;&amp;#10;    if ((Random_Encode_Key_Block_1_Run_1 === &quot;Face_Encode_Key_Block_1_Run_1&quot;)) {&amp;#10;        Recog_Key_Block_1_Run_1 = &quot;Face_Recog_Key_Block_1_Run_1&quot;;&amp;#10;    } else {&amp;#10;        if ((Random_Encode_Key_Block_1_Run_1 === &quot;Place_Encode_Key_Block_1_Run_1&quot;)) {&amp;#10;            Recog_Key_Block_1_Run_1 = &quot;Place_Recog_Key_Block_1_Run_1&quot;;&amp;#10;        } else {&amp;#10;            if ((Random_Encode_Key_Block_1_Run_1 === &quot;Pair_Encode_Key_Block_1_Run_1&quot;)) {&amp;#10;                Recog_Key_Block_1_Run_1 = &quot;Pair_Recog_Key_Block_1_Run_1&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    Recog_List_Block_1_Run_1 = Recognition_Dictionary_Block_1_Run_1[Recog_Key_Block_1_Run_1];&amp;#10;}&amp;#10;if ((Fix_Cross_Started === true)) {&amp;#10;    current_jitter_index += 1;&amp;#10;}&amp;#10;if ((block_loop_trials_counter === 3)) {&amp;#10;    block_loop_trials_counter = 0;&amp;#10;    recognition_trials_counter = 0;&amp;#10;    encode_trials_counter = 0;&amp;#10;}&amp;#10;Block_Loop_Voulme_Counter.push(Block1Loop.thisRepN);&amp;#10;if ((Block_Loop_Voulme_Counter.length === 72)) {&amp;#10;    volume_counter = 1;&amp;#10;    Block_Loop_Voulme_Counter = [];&amp;#10;    Block_1_Run_1_Started = false;&amp;#10;    Encoding_Started = true;&amp;#10;    Recognition_Started = false;&amp;#10;    Block_2_Run_2_Started = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# Calculate and add the end time to the data&amp;#10;current_time = timer.getTime() - start_time&amp;#10;thisExp.addData('end_time', current_time)&amp;#10;&amp;#10;# Get the image OLD/NEW status and determine if the response is correct&amp;#10;image_name = Recog_List_Block_1_Run_1[current_recog_index]&amp;#10;if 'OLD' in image_name:&amp;#10;    image_old_new = &quot;OLD&quot;&amp;#10;else:&amp;#10;    image_old_new = &quot;NEW&quot;&amp;#10;# Add the image_old_new data to the experiment handler before response_old_new&amp;#10;thisExp.addData('image_old_new', image_old_new)&amp;#10;&amp;#10;# Get the participant's response for the recognition trial&amp;#10;if recogTrialTestKeyRespRun1.keys == '1':&amp;#10;    response_old_new = &quot;OLD&quot;&amp;#10;elif recogTrialTestKeyRespRun1.keys == '2':&amp;#10;    response_old_new = &quot;NEW&quot;&amp;#10;else:&amp;#10;    response_old_new = &quot;NONE&quot;&amp;#10;# Add the response_old_new data to the experiment handler&amp;#10;thisExp.addData('response_old_new', response_old_new)&amp;#10;&amp;#10;# Determine d prime and add results to the experiment handler&amp;#10;is_correct = d_prime(image_old_new=image_old_new, response_key=recogTrialTestKeyRespRun1.keys)&amp;#10;thisExp.addData('is_correct', is_correct)&amp;#10;&amp;#10;# Update encoding and recognition txt response list&amp;#10;update_encoding_recognition_response_data(&amp;#10;    block_num=1, # Change based on block number&amp;#10;    run_num=Block_1_Run,  # Change based on run number&amp;#10;    is_correct=is_correct, &amp;#10;    current_displayed_image=current_displayed_image, &amp;#10;    recog_key=Recog_Key_Block_1_Run_1, # Change based on Block and condition&amp;#10;    image_start_time=image_start_time, &amp;#10;    image_time=image_time, &amp;#10;    recog_response_data_face=Recog_Response_Data_Face_Block_1_Run_1,  # Change based on Block and condition&amp;#10;    recog_response_data_place=Recog_Response_Data_Place_Block_1_Run_1,  # Change based on Block and condition&amp;#10;    recog_response_data_pair=Recog_Response_Data_Pair_Block_1_Run_1,  # Change based on Block and condition&amp;#10;    encoding_response_data_face=Encoding_Response_Data_Face_Block_1_Run_1,  # Change based on Block and condition&amp;#10;    encoding_response_data_place=Encoding_Response_Data_Place_Block_1_Run_1,  # Change based on Block and condition&amp;#10;    encoding_response_data_pair=Encoding_Response_Data_Pair_Block_1_Run_1  # Change based on Block and condition&amp;#10;)&amp;#10;&amp;#10;# Increment the current recognition index to iterate over images&amp;#10;current_recog_index += 1&amp;#10;&amp;#10;if current_recog_index == 1: # First stimulus is shown&amp;#10;    Fix_Cross_Started = True # Next ISI is '+'&amp;#10;    recognition_trials_counter += 1&amp;#10;    &amp;#10;if current_recog_index == 12: # Last stimulus is shown&amp;#10;    # Increment the number of trialis in block loop&amp;#10;    block_loop_trials_counter += 1&amp;#10;    &amp;#10;    Recognition_Started = False # End of recognition&amp;#10;    Fix_Cross_Started = False # Next ISI is instructions&amp;#10;    Encoding_Started = True # Start of encoding &amp;#10;        &amp;#10;    # Reset the current recognition index &amp;#10;    current_recog_index = 0&amp;#10;    &amp;#10;    # Reset current jitter index&amp;#10;    current_jitter_index = 0&amp;#10;    &amp;#10;    # Determine the corresponding recognition key based on the chosen encoding key&amp;#10;    if Random_Encode_Key_Block_1_Run_1  == 'Face_Encode_Key_Block_1_Run_1':&amp;#10;        Recog_Key_Block_1_Run_1 = 'Face_Recog_Key_Block_1_Run_1'&amp;#10;    elif Random_Encode_Key_Block_1_Run_1 == 'Place_Encode_Key_Block_1_Run_1':&amp;#10;        Recog_Key_Block_1_Run_1 = 'Place_Recog_Key_Block_1_Run_1'&amp;#10;    elif Random_Encode_Key_Block_1_Run_1 == 'Pair_Encode_Key_Block_1_Run_1':&amp;#10;        Recog_Key_Block_1_Run_1 = 'Pair_Recog_Key_Block_1_Run_1'&amp;#10;&amp;#10;    # Get the corresponding recognition list based on the determined recognition key&amp;#10;    Recog_List_Block_1_Run_1 = Recognition_Dictionary_Block_1_Run_1[Recog_Key_Block_1_Run_1]&amp;#10;&amp;#10;&amp;#10;# Iterate through jitter times if showing fixation cross and after first image&amp;#10;if Fix_Cross_Started == True:&amp;#10;    current_jitter_index += 1&amp;#10; &amp;#10;# Reset the trial counters&amp;#10;if block_loop_trials_counter == 3:&amp;#10;    block_loop_trials_counter = 0&amp;#10;    recognition_trials_counter = 0&amp;#10;    encode_trials_counter = 0&amp;#10;&amp;#10;# For resetting volume_counter based on Block loop iteration &amp;#10;Block_Loop_Voulme_Counter.append(Block1Loop.thisRepN)&amp;#10;&amp;#10;# When Block Loop ends based on stimuli total&amp;#10;if len(Block_Loop_Voulme_Counter) == 72: &amp;#10;    volume_counter = 1 # Reset volume_counter&amp;#10;    Block_Loop_Voulme_Counter = [] # Reinitalize counter&amp;#10;    Block_1_Run_1_Started = False # Block 1 Run 1 finished&amp;#10;    Encoding_Started = True # Start of encoding for next block &amp;#10;    Recognition_Started = False # End of recognition for next block&amp;#10;    Block_2_Run_2_Started = True # Begin next block DELETE?&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="recognitonTrialRun1Code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="recogTrialRun1_Image">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$Recog_List_Block_1_Run_1[current_recog_index]" valType="file" updates="set every frame" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="recogTrialRun1_Image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.33, 1.0)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="recogFixationText_Run1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="recogFixationText_Run1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="6.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="recogTrialTestKeyRespRun1">
        <Param val="'1','2'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="recogTrialTestKeyRespRun1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="6" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setUp"/>
    <LoopInitiator loopType="TrialHandler" name="condLoaderLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="condLoaderLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="condLoader"/>
    <LoopTerminator name="condLoaderLoop"/>
    <Routine name="triggerSync"/>
    <LoopInitiator loopType="TrialHandler" name="Block1Loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="3" valType="num"/>
      <Param name="name" updates="None" val="Block1Loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="InstructionsText"/>
    <LoopInitiator loopType="TrialHandler" name="encodeLoop_Block1Run1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="12" valType="num"/>
      <Param name="name" updates="None" val="encodeLoop_Block1Run1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="encodeTrial_Run1"/>
    <LoopTerminator name="encodeLoop_Block1Run1"/>
    <Routine name="InstructionsText"/>
    <LoopInitiator loopType="TrialHandler" name="recognitionLoop_Block1Run1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="12" valType="num"/>
      <Param name="name" updates="None" val="recognitionLoop_Block1Run1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="recognitionTrial_Run1"/>
    <LoopTerminator name="recognitionLoop_Block1Run1"/>
    <LoopTerminator name="Block1Loop"/>
  </Flow>
</PsychoPy2experiment>
